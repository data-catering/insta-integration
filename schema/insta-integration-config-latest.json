{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "insta-integration configuration schema",
  "description": "Configuration to run integration tests with insta-integration",
  "type": "object",
  "properties": {
    "env": {
      "$ref": "#/$defs/EnvironmentVariables",
      "description": "Environment variables to be applied to all runs."
    },
    "services": {
      "type": "array",
      "description": "External services required to run integration tests",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the service. Optionally, define the version of the service to run using pattern '<service>:<version>'.",
            "examples": ["kafka", "mysql", "postgres", "postgres:16.3"]
          },
          "data": {
            "type": "string",
            "description": "Folder path or link to startup files. For example, 'postgres/sql' folder with schema and table creation SQL files. Refer to insta-infra for possible startup files"
          },
          "env": {
            "$ref": "#/$defs/EnvironmentVariables",
            "description": "Environment variables for the service."
          }
        },
        "additionalProperties": false,
        "required": ["name"]
      }
    },
    "run": {
      "type": "array",
      "description": "Applications/jobs to run as part of the integration tests. Run in order.",
      "items": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Bash command to run your application/job."
          },
          "commandWaitForFinish": {
            "type": "boolean",
            "description": "Whether to wait for the command to finish before running data generation/validation.",
            "default": true
          },
          "env": {
            "$ref": "#/$defs/EnvironmentVariables",
            "description": "Environment variables for your application/job."
          },
          "generateFirst": {
            "type": "boolean",
            "description": "Whether to run data generation before your application/job runs."
          },
          "test": {
            "type": "object",
            "description": "Data Caterer configuration for data generation and validation",
            "properties": {
              "env": {
                "$ref": "#/$defs/EnvironmentVariables",
                "description": "Environment variables for data-caterer Docker image. Check 'src/config.js' baseApplicationConf for potential environment variables to override."
              },
              "generation": {
                "type": "object",
                "description": "Define data sources along with schemas for data generation.",
                "propertyNames": {
                  "enum": [
                    "cassandra",
                    "postgres",
                    "mysql",
                    "csv",
                    "delta",
                    "iceberg",
                    "json",
                    "orc",
                    "parquet",
                    "http",
                    "kafka",
                    "solace"
                  ]
                },
                "additionalProperties": {
                  "type": "array",
                  "description": "Array of data generation tasks with the data source name as the key.",
                  "items": {
                    "type": "object",
                    "description": "Data generation task details with information about data source, number of records and schema.",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "options": {
                        "type": "object",
                        "description": "Data source configuration for data generation.",
                        "properties": {
                          "metadataSourceType": {
                            "description": "Type of metadata source for retrieval of schema information.",
                            "enum": [
                              "marquez",
                              "open_api",
                              "open_metadata",
                              "open_data_contract_standard"
                            ]
                          }
                        },
                        "allOf": [
                          {
                            "if": {
                              "properties": {
                                "metadataSourceType": {
                                  "const": "open_api"
                                }
                              },
                              "required": ["metadataSourceType"]
                            },
                            "then": {
                              "properties": {
                                "schemaLocation": {
                                  "description": "Location of OpenAPI spec file (can be a URL or file pathway).",
                                  "type": "string"
                                }
                              },
                              "required": ["schemaLocation"]
                            }
                          },
                          {
                            "if": {
                              "properties": {
                                "metadataSourceType": {
                                  "const": "open_metadata"
                                }
                              },
                              "required": ["metadataSourceType"]
                            },
                            "then": {
                              "properties": {
                                "tableFqn": {
                                  "description": "Table full qualified name."
                                }
                              }
                            }
                          },
                          {
                            "if": {
                              "properties": {
                                "metadataSourceType": {
                                  "const": "marquez"
                                }
                              },
                              "required": ["metadataSourceType"]
                            },
                            "then": {
                              "properties": {
                                "metadataSourceUrl": {
                                  "description": "Marquez URL."
                                },
                                "namespace": {
                                  "description": "Namespace to retrieve metadata from."
                                },
                                "dataset": {
                                  "description": "Dataset to retrieve metadata from."
                                }
                              },
                              "required": ["metadataSourceUrl", "namespace"]
                            }
                          }
                        ]
                      },
                      "count": {
                        "type": "object",
                        "description": "Define the number of records to generate.",
                        "properties": {
                          "records": {
                            "type": "integer",
                            "description": "Total number of records to generate."
                          },
                          "generator": {
                            "description": "Random number of records.",
                            "$ref": "#/$defs/CountGenerator"
                          },
                          "perColumn": {
                            "type": "object",
                            "description": "Generate records per unique set of column values. For example, generate 5 transactions for each 'account_number'.",
                            "properties": {
                              "columnNames": {
                                "type": "array",
                                "description": "Array of column names to generate records for each set of unique values.",
                                "items": {
                                  "type": "string",
                                  "description": "Column name found within schema fields."
                                }
                              },
                              "count": {
                                "type": "integer",
                                "description": "Static number of records per unique set of column values."
                              },
                              "generator": {
                                "description": "Random number of records per unique set of column values.",
                                "$ref": "#/$defs/CountGenerator"
                              }
                            },
                            "additionalProperties": false
                          }
                        }
                      },
                      "schema": {
                        "type": "object",
                        "properties": {
                          "fields": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the field."
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Data type of the field.",
                                  "default": "string",
                                  "$ref": "#/$defs/SchemaFieldDataTypes"
                                },
                                "options": {
                                  "description": "Metadata to define restrict the data generated.",
                                  "type": "object"
                                }
                              },
                              "required": ["name"],
                              "unevaluatedProperties": false,
                              "allOf": [
                                {
                                  "if": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "const": "string"
                                      }
                                    },
                                    "required": ["type"]
                                  },
                                  "then": {
                                    "type": "object",
                                    "properties": {
                                      "options": {
                                        "$ref": "#/$defs/SchemaStringOptions"
                                      }
                                    }
                                  }
                                },
                                {
                                  "if": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "anyOf": [
                                          {
                                            "const": "integer"
                                          },
                                          {
                                            "const": "long"
                                          },
                                          {
                                            "const": "short"
                                          },
                                          {
                                            "const": "decimal"
                                          },
                                          {
                                            "const": "double"
                                          },
                                          {
                                            "const": "float"
                                          }
                                        ]
                                      }
                                    },
                                    "required": ["type"]
                                  },
                                  "then": {
                                    "type": "object",
                                    "properties": {
                                      "options": {
                                        "$ref": "#/$defs/SchemaNumberOptions"
                                      }
                                    }
                                  }
                                },
                                {
                                  "if": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "anyOf": [
                                          {
                                            "const": "date"
                                          },
                                          {
                                            "const": "timestamp"
                                          }
                                        ]
                                      }
                                    },
                                    "required": ["type"]
                                  },
                                  "then": {
                                    "type": "object",
                                    "properties": {
                                      "options": {
                                        "$ref": "#/$defs/SchemaDateOptions"
                                      }
                                    }
                                  }
                                },
                                {
                                  "if": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "const": "binary"
                                      }
                                    },
                                    "required": ["type"]
                                  },
                                  "then": {
                                    "type": "object",
                                    "properties": {
                                      "options": {
                                        "$ref": "#/$defs/SchemaBinaryOptions"
                                      }
                                    }
                                  }
                                },
                                {
                                  "if": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "const": "array"
                                      }
                                    },
                                    "required": ["type"]
                                  },
                                  "then": {
                                    "type": "object",
                                    "properties": {
                                      "options": {
                                        "$ref": "#/$defs/SchemaBinaryOptions"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "allOf": [
                  {
                    "if": {
                      "propertyNames": {
                        "enum": ["postgres", "mysql"]
                      }
                    },
                    "then": {
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "options": {
                              "type": "object",
                              "properties": {
                                "dbtable": {
                                  "description": "Name of the schema and table to connect to (<schema>.<table> format).",
                                  "type": "string",
                                  "pattern": "^(.+?)\\.(.+?)$"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": ["cassandra"]
                      }
                    },
                    "then": {
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "options": {
                              "type": "object",
                              "properties": {
                                "keyspace": {
                                  "description": "Cassandra keyspace name."
                                },
                                "table": {
                                  "description": "Cassandra table name."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": ["csv", "delta", "json", "orc", "parquet"]
                      }
                    },
                    "then": {
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "options": {
                              "type": "object",
                              "properties": {
                                "partitions": {
                                  "description": "Number of file partitions to create."
                                },
                                "path": {
                                  "description": "Path to file."
                                },
                                "partitionBy": {
                                  "description": "Column name(s) to partition dataset by (comma separated)."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": ["iceberg"]
                      }
                    },
                    "then": {
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "options": {
                              "type": "object",
                              "properties": {
                                "catalogType": {
                                  "description": "Type of Iceberg catalog.",
                                  "enum": [
                                    "hive",
                                    "hadoop",
                                    "rest",
                                    "glue",
                                    "jdbc",
                                    "nessie"
                                  ]
                                },
                                "catalogUri": {
                                  "description": "URI for catalog."
                                },
                                "path": {
                                  "description": "Warehouse path for catalog."
                                },
                                "table": {
                                  "description": "Table name of Iceberg dataset."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": ["kafka"]
                      }
                    },
                    "then": {
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "options": {
                              "type": "object",
                              "properties": {
                                "topic": {
                                  "description": "Topic name."
                                },
                                "rowsPerSecond": {
                                  "description": "Number of records to create per second."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "if": {
                      "propertyNames": {
                        "enum": ["solace"]
                      }
                    },
                    "then": {
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "options": {
                              "type": "object",
                              "properties": {
                                "destinationName": {
                                  "description": "Name of the topic/queue."
                                },
                                "rowsPerSecond": {
                                  "description": "Number of records to create per second."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "mount": {
                "description": "Add volume mount for data-caterer Docker image.",
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": ".*:.*"
                }
              },
              "relationship": {
                "type": "object",
                "description": "Define any relationships between data generation data sources. For example, 'account_number' field being the same across two Postgres tables accounts and balances.",
                "patternProperties": {
                  "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+$": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Uses the pattern: '<name of generation>.<field name>'",
                      "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+$"
                    }
                  }
                },
                "additionalProperties": false
              },
              "validation": {
                "type": "object",
                "description": "Define data sources along with validation rules to run after data generation and your application/job.",
                "propertyNames": {
                  "enum": [
                    "cassandra",
                    "postgres",
                    "mysql",
                    "csv",
                    "delta",
                    "iceberg",
                    "json",
                    "orc",
                    "parquet"
                  ]
                },
                "additionalProperties": {
                  "type": "array",
                  "description": "Array of data validation tasks with the data source name as the key.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "options": {
                        "type": "object",
                        "description": "Data source configuration details."
                      },
                      "validations": {
                        "type": "array",
                        "description": "Array of data validation rules.",
                        "items": {
                          "type": "object",
                          "description": "Data validation rule.",
                          "oneOf": [
                            {
                              "$ref": "#/$defs/BasicValidation"
                            },
                            {
                              "$ref": "#/$defs/AggregationValidation"
                            },
                            {
                              "$ref": "#/$defs/UpstreamValidation"
                            },
                            {
                              "$ref": "#/$defs/ColumnNameValidation"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    }
  },
  "additionalProperties": false,
  "$defs": {
    "EnvironmentVariables": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "CountGenerator": {
      "type": "object",
      "properties": {
        "options": {
          "type": "object",
          "propertyNames": {
            "enum": ["sql", "min", "max", "stddev", "mean"]
          }
        },
        "additionalProperties": false
      }
    },
    "SchemaFieldDataTypes": {
      "enum": [
        "string",
        "integer",
        "long",
        "double",
        "short",
        "decimal",
        "float",
        "date",
        "timestamp",
        "boolean",
        "binary",
        "byte",
        "array",
        "struct"
      ]
    },
    "SchemaFieldBaseOptions": {
      "type": "object",
      "properties": {
        "enabledEdgeCase": {
          "type": "boolean",
          "description": "Enable generating edge case values for data type.",
          "default": false
        },
        "edgeCaseProb": {
          "type": "number",
          "description": "Probability of generating edge case values. Range from 0-1.",
          "minimum": 0,
          "maximum": 1,
          "default": 0
        },
        "isUnique": {
          "type": "boolean",
          "description": "Generate only unique values.",
          "default": false
        },
        "seed": {
          "type": "number",
          "description": "Seed for generating consistent random values.",
          "default": -1
        },
        "sql": {
          "type": "string",
          "description": "Spark SQL expression for generating data."
        },
        "oneOf": {
          "type": "array",
          "description": "Generated values will be one of the defined values."
        },
        "omit": {
          "type": "boolean",
          "description": "Exclude the field from the final output. Can be used for intermediate data generation.",
          "default": false
        }
      }
    },
    "SchemaNullOptions": {
      "type": "object",
      "properties": {
        "enableNull": {
          "type": "boolean",
          "description": "Enable generation of null values.",
          "default": false
        },
        "nullProbability": {
          "type": "number",
          "description": "Probability of generating null values. Range from 0-1.",
          "minimum": 0,
          "maximum": 1,
          "default": 0
        }
      }
    },
    "SchemaStringOptions": {
      "type": "object",
      "properties": {
        "minLen": {
          "type": "integer",
          "description": "Minimum length of generated values.",
          "default": 1
        },
        "maxLen": {
          "type": "integer",
          "description": "Maximum length of generated values.",
          "default": 10
        },
        "expression": {
          "type": "string",
          "description": "Faker expression to generate values.",
          "examples": ["#{Name.name}"]
        },
        "regex": {
          "type": "string",
          "description": "Regex for generating values."
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/SchemaFieldBaseOptions"
        },
        {
          "$ref": "#/$defs/SchemaNullOptions"
        }
      ],
      "unevaluatedProperties": false
    },
    "SchemaNumberOptions": {
      "type": "object",
      "properties": {
        "min": {
          "type": "number",
          "description": "Minimum generated value.",
          "default": 0
        },
        "max": {
          "type": "number",
          "description": "Maximum generated value.",
          "default": 1000
        },
        "stddev": {
          "type": "number",
          "description": "Standard deviation of generated values.",
          "default": 1
        },
        "mean": {
          "type": "number",
          "description": "Mean of generated values.",
          "default": 500
        }
      },
      "$ref": "#/$defs/SchemaFieldBaseOptions",
      "unevaluatedProperties": false
    },
    "SchemaDateOptions": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "description": "Maximum generated value."
        },
        "max": {
          "type": "string",
          "description": "Maximum generated value."
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/SchemaFieldBaseOptions"
        },
        {
          "$ref": "#/$defs/SchemaNullOptions"
        }
      ],
      "unevaluatedProperties": false
    },
    "SchemaBinaryOptions": {
      "type": "object",
      "properties": {
        "minLen": {
          "type": "number",
          "description": "Minimum length of generated values."
        },
        "maxLen": {
          "type": "number",
          "description": "Maximum length of generated values."
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/SchemaFieldBaseOptions"
        },
        {
          "$ref": "#/$defs/SchemaNullOptions"
        }
      ],
      "unevaluatedProperties": false
    },
    "SchemaArrayOptions": {
      "type": "object",
      "properties": {
        "arrayMinLen": {
          "type": "number",
          "description": "Minimum generated array length."
        },
        "arrayMaxLen": {
          "type": "number",
          "description": "Maximum generated array length."
        },
        "arrayType": {
          "type": "string",
          "description": "Data type of array values.",
          "$ref": "#/$defs/SchemaFieldDataTypes"
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/SchemaFieldBaseOptions"
        },
        {
          "$ref": "#/$defs/SchemaNullOptions"
        }
      ],
      "unevaluatedProperties": false
    },
    "ValidationDescription": {
      "const": "description",
      "description": "Description of the validation rule. Helpful to provide additional context."
    },
    "ValidationErrorThreshold": {
      "const": "errorThreshold",
      "description": "Define the number of records or percentage of records that do not meet the validation rule before marking the validation as failed."
    },
    "ValidationPreFilterExpression": {
      "const": "preFilterExpr",
      "description": "SQL expression that is run to filter data before running the validation."
    },
    "ValidationExpression": {
      "const": "expr",
      "description": "SQL expression to define validation. Check https://spark.apache.org/docs/latest/api/sql for reference."
    },
    "ValidationSelectExpression": {
      "const": "selectExpr",
      "description": "SQL expression used to apply to columns before running validations."
    },
    "ValidationAggregateExpression": {
      "const": "aggExpr",
      "description": "SQL expression to define validation after aggregation. Check https://spark.apache.org/docs/latest/api/sql for reference."
    },
    "ValidationAggregateColumn": {
      "const": "aggCol",
      "description": "Column name to run aggregation on."
    },
    "ValidationAggregateType": {
      "const": "aggType",
      "description": "Type of aggregation to run. Can be either: sum, avg, max, min, mean, stddev, count."
    },
    "ValidationAggregateGroupByColumns": {
      "const": "groupByCols",
      "description": "Column names to group by for aggregation calculation."
    },
    "ValidationUpstreamJoinColumns": {
      "const": "joinColumns",
      "description": "Column names to run join operation on."
    },
    "ValidationUpstreamJoinType": {
      "const": "joinType",
      "description": "Type of join to run."
    },
    "ValidationUpstreamDataSource": {
      "const": "upstreamDataSource",
      "description": "Name of the upstream data source."
    },
    "ValidationUpstreamReadOptions": {
      "const": "upstreamReadOptions",
      "description": "Additional configuration to connect to upstream data source."
    },
    "ValidationUpstreamNestedValidation": {
      "const": "validation",
      "description": "Validation to run after join with upstream data source."
    },
    "ValidationColumnNameType": {
      "const": "columnNameType",
      "description": "Type of column name validation to run."
    },
    "ValidationColumnNameCount": {
      "const": "count",
      "description": "Expected number of column names."
    },
    "ValidationColumnNameMaxCount": {
      "const": "maxCount",
      "description": "Maximum number of column names."
    },
    "ValidationColumnNameMinCount": {
      "const": "minCount",
      "description": "Minimum number of column names."
    },
    "ValidationColumnNames": {
      "const": "names",
      "description": "Expected column names."
    },
    "BasicValidation": {
      "type": "object",
      "propertyNames": {
        "anyOf": [
          {
            "$ref": "#/$defs/ValidationDescription"
          },
          {
            "$ref": "#/$defs/ValidationErrorThreshold"
          },
          {
            "$ref": "#/$defs/ValidationPreFilterExpression"
          },
          {
            "$ref": "#/$defs/ValidationExpression"
          },
          {
            "$ref": "#/$defs/ValidationSelectExpression"
          }
        ]
      }
    },
    "AggregationValidation": {
      "type": "object",
      "propertyNames": {
        "anyOf": [
          {
            "$ref": "#/$defs/ValidationDescription"
          },
          {
            "$ref": "#/$defs/ValidationErrorThreshold"
          },
          {
            "$ref": "#/$defs/ValidationPreFilterExpression"
          },
          {
            "$ref": "#/$defs/ValidationAggregateColumn"
          },
          {
            "$ref": "#/$defs/ValidationAggregateExpression"
          },
          {
            "$ref": "#/$defs/ValidationAggregateGroupByColumns"
          },
          {
            "$ref": "#/$defs/ValidationAggregateType"
          }
        ]
      }
    },
    "UpstreamValidation": {
      "type": "object",
      "propertyNames": {
        "anyOf": [
          {
            "$ref": "#/$defs/ValidationDescription"
          },
          {
            "$ref": "#/$defs/ValidationErrorThreshold"
          },
          {
            "$ref": "#/$defs/ValidationPreFilterExpression"
          },
          {
            "$ref": "#/$defs/ValidationUpstreamDataSource"
          },
          {
            "$ref": "#/$defs/ValidationUpstreamJoinColumns"
          },
          {
            "$ref": "#/$defs/ValidationUpstreamJoinType"
          },
          {
            "$ref": "#/$defs/ValidationUpstreamNestedValidation"
          },
          {
            "$ref": "#/$defs/ValidationUpstreamReadOptions"
          }
        ]
      }
    },
    "ColumnNameValidation": {
      "type": "object",
      "propertyNames": {
        "anyOf": [
          {
            "$ref": "#/$defs/ValidationDescription"
          },
          {
            "$ref": "#/$defs/ValidationErrorThreshold"
          },
          {
            "$ref": "#/$defs/ValidationPreFilterExpression"
          },
          {
            "$ref": "#/$defs/ValidationColumnNameCount"
          },
          {
            "$ref": "#/$defs/ValidationColumnNameMaxCount"
          },
          {
            "$ref": "#/$defs/ValidationColumnNameMinCount"
          },
          {
            "$ref": "#/$defs/ValidationColumnNames"
          },
          {
            "$ref": "#/$defs/ValidationColumnNameType"
          }
        ]
      }
    }
  }
}
